Version 0.8.0
===========================
Released April 25th 2020

ngskit4b benchmark
Benchmark aligners using observed error profiled simulated NGS readsets
Actual sequenced reads are aligned against a known targeted genome assembly or set of target sequences. 
Individual reads claimed as being aligned are processed against the claimed alignment loci and the base error
profile distribution along the length of the read is obtained by iterating along the read length and recording
the read offsets at which there are base mismatches. This is further extended such that if the aligned read
contains any insertions or deletions then the offset and length of these InDels is also recorded. 
Additionally, the strand to which the read was aligned is recorded as part of the sequencing error profile.
If paired end alignments are being processed, then the individual read profiles and insert size for a given 
aligned pair is used as if a single extended profile when generating simulated read pairs. 
When generating simulated reads to be used in benchmarking, read sequences are randomly sampled from a targeted 
genome assembly, or set of target sequences, and each read sequence will individually have a empirically derived
sequencing error profile applied such that the simulated reads will have a known ground truth originating loci
with an error profile consistent with those observed in the original sequenced read. This consistency extends to
insertions and deletions, strand, and if paired end simulation then the insert size as well as the individual mate
read error profiles.
The simulated reads with error profiles applied are then aligned back to the target and scored at the individual base
level using weightings which may be specified according to benchmarking objectives. Default weightings are applied for
bases which are correctly aligned, misaligned, unaligned and for a special case in which reads have been silently
trimmed but the base lies within the ground truth loci boundaries for that read. Overall scoring is provided for two
cases – against the background of all putative scoring bases allowing for inclusion of unaligned base weightings into
the score, and in aligned bases only which is excluding unaligned base weightings.
A processing mode '-m0' allows the researcher to copy input raw reads into another raw read file limiting the number
of reads copied to a specified number of reads '-r'; this is generally used on systems which have resource constraints.  

Parameterisation Options:

-h, --help
	This option will display the list of options and brief help as to the
	function of each of these options together with default values, and
	then terminates the process

-v, --version, --ver
	This option displays the application build version and then terminates

-f, --FileLogLevel=<int>
	Use this option to control the level of diagnostics written to screen
	and logfile. Currently most log messages are written at the default
	level of diagnostics (3)

-F, --log=<file>
	Use to specify the log file to which diagnostics are to be written.
	If not specified then diagnostics will be written to screen only

-q, --sumrslts=<file>
	Output results summary to this SQLite3 database file

-w, --experimentname=<str>
        Specifies experiment name to use in SQLite3 database file

-W, --experimentdescr=<str>
	Specifies experiment description to use in SQLite3 database file

-m, --mode=<int>
    Processing mode: 
	    0 - Generate raw reads file(s) from existing fasta file limiting number of raw reads 
		1 - generate observed CIGARs from alignments
		2 - simulate reads using observed CIGARs
		3  score base alignments using expected CIGARs

-b, --alignments=<file>
	input alignments (SAM or BAM) when generating observed CIGARs '-m1' or alignments if scoring using expected CIGARs '-m3'

-i, --insereads=<file>
	input SE reads file, or PE1 reads file if PE processing

-I, --inpe2reads=<file>
	input PE mate reads file if PE processing

-o, --reads=<file>
	Write reads to this file SE or PE1 if PE reads processing

-O, --pe2reads=<file>
	Write PE mate reads to this file if PE reads processing

-p, --pe
	set if PE pairs processing otherwise SE reads only

-x, --refgenome=<file>
	alignment reference genome suffix array ('ngskit4b index' generated) file

-s, --results=<file>      
	Append summary benchmark score results to this CSV file '-m3'

-P, --primary             
	Set if only primary alignments are to be scored '-m2'

-c, --CIGARs=<file>       
	Write observed CIGARs to this CSV file when generating observed CIGAR error profiles '-m1'
	Read observed CIGAR error profiles from this CSV file when simulating reads '-m2'

-j, --alignedbasepts=<int> 
	Reward correctly aligned bases with this many points (defaults to 10)

-J, --silenttrimalignbasepts=<int>
	Reward silently trimmed aligned bases within truth bounds with this many points (defaults to 1)

-k, --unalignedbasepts=<int>
	Penalise unaligned bases (defaults to -1)

-l, --misalignedbasepts=<int> 
	Penalise incorrectly aligned bases (defaults to -50)

-r, --maxnumreads=<int>   
	Process for this number of reads or read pairs if PE (defaults to 5000000 if limiting '-m0' or 2000000 if simulating '-m2'

-a, --controlaligner=<str> 
	Names control aligner used for derivation of empirical error profiles '-m3'

-A, --scoredaligner=<str> 
	Names aligner used to align simulated reads '-m3'

-e, --experiment=<str>    
	Brief description of benchmarking experiment '-m3'


Note: Options and associated parameters can be entered into an option parameter
file, one option and it's associated parameter per line.
To specify usage of this option paramter file to the ngskit4b toolkit
components then precede its name with '@', e.g. ngskit4b blitz @myparams.txt


