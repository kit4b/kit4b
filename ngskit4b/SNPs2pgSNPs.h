/*
Portions of this toolkit are a source base clone of 'BioKanga' release 4.4.2 (https://github.com/csiro-crop-informatics/biokanga) which contain
significant source code changes enabling new functionality with consequent process parameterisation changes. These changes have resulted in
incompatibilty with 'BioKanga'.

Because of the potentential for confusion by users unaware of functionality and process parameterisation changes then the modified source base
and resultant compiled executables have been renamed to 'kit4b' - K-mer Informed Toolkit for Bioinformatics.
The renaming will force users of the 'BioKanga' toolkit to examine scripting which is dependent on existing 'BioKanga'
parameterisations so as to make appropriate changes if wishing to utilise 'kit4b' parameterisations and functionality.

'kit4b' is being released under the Opensource Software License Agreement (GPLv3)
'kit4b' is Copyright (c) 2019, 2020
Please contact Dr Stuart Stephen < stuartjs@g3web.com > if you have any questions regarding 'kit4b'.
*/

#pragma once

const int cAllocLineBuffSize = 0x0ffffff;	// allocate line buffer for output which can hold this many chars

typedef enum TAG_eModepgSNP {
	eMpgSNPKalign = 0,						// input SNPs are those generated by kalign
	eMpgSNPmarkers							// input SNPs are those generated by snpmarkers
} eModepgSNP;

const int cAlignNumSNPfields = 23;			// if generated by 'kit4b align' then there will be this many CSV fields
const int cSNPMarkerNumFields = 4 + 9;		// if generated by 'kit4b snpmarkers' then there will be a minimum of this number of CSVfields

typedef struct TAG_sCultivar {
	char szName[cMaxDatasetSpeciesChrom+1];		// name of this cultivar
	bool bSNPInferenced;						// true if allele was inferenced 
	etSeqBase CalledBase;						// base called as being the major allele for this cultivar
	int Score;									// score
	int TotalBaseCnts;							// total number of base counts
	int BaseCnts[5];							// counts for each base
} tsCultivar;

class CSNPs2pgSNPs
{
	int m_MinCoverage;							// must be at least this read coverage at SNP site
	double m_MinAlleleProp;						// putative allele must be at least this proportion of total site read coverage
	double m_PValueThres;						// acceptance PValue
	char m_szInSNPsFile[_MAX_PATH];				// processing this input kalign SNP calls or snpmarker CSV file
	char m_szOutpgSNPsFile[_MAX_PATH];			// output in UCSC Personal Genome SNP format to this file
	char m_TargAssemblyName[cMaxDatasetSpeciesChrom+1]; // alignments were against this targeted assembly
	char m_szDescription[_MAX_PATH];
	char m_szTrackName[100];
	int m_NumCultivars;							// number of cultivars being processed
	tsCultivar m_Cultivars[cMaxCultivars];		// cultivar specific metadata
	CCSVFile *m_pCSV;							// used to load SNP calls
	int m_hOutpgSNPs;							// output UCSC Personal Genome SNP format file handle
	
	int m_LineBuffOffs;							// offset in m_pszLineBuff at which to next write buffered lines
	int m_AllocdLineBuff;						// 	m_pszLineBuff allocated to a max of this many chars			
	char *m_pszLineBuff;						// line buffer memory to hold buffered output

	int ProcessKalignSNPs(void);				// output kalign SNPs to a UCSC Personal Genome SNP format file

	int ProcessSnpmarkersSNPs(void);			// output snpmarkers generated SNP calls to a UCSC Personal Genome SNP format file

public:
	CSNPs2pgSNPs(void);
	~CSNPs2pgSNPs(void);

	void Reset(void);							// re-initialise  
	int Process(eModepgSNP Mode,				// processing mode
			int MinCoverage,				// must be at least this coverage at SNP site
			double MinAlleleProp,			// putative allele must be at least this proportion of total site read coverage
			double PValueThres,				// only accept SNP alleles which have a PValue <= this threshold
			char* pszTrackName,				// track name
			char* pszAssemblyName,			// UCSC assembly name - for SARS-CoV-2 it is "wuhCor1"
			char* pszExperimentDescr,		// describes experiment
			char* pszSNPFile,				// load SNP calls from this CSV file, can be either SNPs generated by kalign or snpmarkers
			char* pszOutFile);				// output SNPs to this UCSC Personal Genome SNP format file
};

